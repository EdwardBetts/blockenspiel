{"name":"Blockenspiel","body":"Blockenspiel is a helper library providing several different strategies for\r\nimplementing DSL blocks. It supports both DSLs that take a block parameter\r\nand those that do not.\r\n\r\nHere's a simple example:\r\n\r\n```ruby\r\n# Call DSL block with parameter\r\nconfigure_me do |config|\r\n  config.add_foo(1)\r\n  config.add_bar(2)\r\nend\r\n\r\n# Call DSL block without parameter\r\nconfigure_me do\r\n  add_foo(3)\r\n  add_bar(4)\r\nend\r\n```\r\n\r\nTo support the above usage, you can do this:\r\n\r\n```ruby\r\n# Implement DSL block methods\r\nclass ConfigMethods\r\n  include Blockenspiel::DSL\r\n  def add_foo(value)\r\n    # do something\r\n  end\r\n  def add_bar(value)\r\n    # do something\r\n  end\r\nend\r\n\r\n# Implement configure_me method\r\ndef configure_me(&block)\r\n  Blockenspiel.invoke(block, ConfigMethods.new)\r\nend\r\n```\r\n\r\nBy default, Blockenspiel uses a mixin technique (proposed by the late Why The Lucky Stiff) to support parameterless blocks without the complications introduced by <tt>instance_eval</tt>. It supports nested blocks and multithreaded access, and provides a variety of tools for handling the typical issues you may encounter when writing DSLs.\r\n\r\nInstall with \"gem install blockenspiel\".\r\n\r\nFor more information:\r\n\r\n* [Detailed usage and examples](http://dazuma.github.com/blockenspiel/rdoc/Blockenspiel_rdoc.html)\r\n* See the [documentation](http://dazuma.github.com/blockenspiel/rdoc)\r\n* Source code on [Github](http://github.com/dazuma/blockenspiel)\r\n* Report issues [here](http://github.com/dazuma/blockenspiel/issues)\r\n* An [extended analysis](http://dazuma.github.com/blockenspiel/rdoc/ImplementingDSLblocks_rdoc.html) of different ways to implement DSL blocks\r\n","tagline":"A comprehensive implementation of Ruby DSL blocks","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}